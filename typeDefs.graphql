scalar DateTime

scalar Upload

enum PhotoCategory {
  SELFIE
  PORTRAIT
  ACTION
  LANDSCAPE
  GRAPHIC
}

type Visitors {
  totalCount: Int!
  todayCount: Int!
}

type User {
  id: ID!
  email: String!
  name: String!
  avatar: String
  loginSecret: String
  isAdmin: String!
  created: DateTime!
}

type Photo {
  id: ID!
  url: String!
  name: String!
  description: String
  category: PhotoCategory!
  postedBy: User!
  taggedUsers: [User!]!
  created: DateTime!
}

type AuthPayload {
  token: String!
  user: User!
}

type TokenObject {
  token: String!
  refreshToken: String!
}

type Query {
  totalPhotos: Int!
  allPhotos: [Photo!]!
  totalUsers: Int!
  allUsers: [User!]!
  me: User
  test: String!
}

type Mutation {
  createUser(input: CreateUserInput!): User!
  tempDeleteUser(email: String!): String!
  tempUpdateUser(input: TempUpdateInput!): String!
  requestLogin(email: String!): User!
  confirmLogin(input: ConfirmLoginInput!): TokenObject!
  testRequest(token: String!): String!
  postPhoto(input: PostPhotoInput!): Photo!
  deletePhoto(id: String!): String
  githubAuth(code: String!): AuthPayload!
  addFakeUsers(count: Int = 1): [User!]!
  deleteFakeUser(input: DeleteFakeUserInput!): String
  fakeUserAuth(githubLogin: ID!): AuthPayload!
  setVisitors(cookies: String): Visitors!
}

type Subscription {
  newPhoto: Photo!
  newUser: User!
  test: String!
}

input PostPhotoInput {
  name: String!
  category: PhotoCategory = PORTRAIT
  description: String
  file: Upload!
}

input DeleteFakeUserInput {
  githubLogin: String!
  name: String!
}

input CreateUserInput {
  email: String!
  name: String!
}

input ConfirmLoginInput {
  email: String!
  secretWord: String!
}

input TempUpdateInput {
  id: String!
  avatar: String
}
